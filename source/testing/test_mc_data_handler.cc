#include "mcobs_handler.h"
#include <cstdio> 
#include <cstdlib>
#include <ctime>
#include <list>
#include <set>
#include <cmath>
#include <complex>
#include "xml_handler.h"
using namespace std;


// ***********************************************************************************


class TestDummy {

 public:

   unsigned int getNumberOfMeasurements() const
    {return 254;}

   TestDummy() {}

   void getData(int key, int serial_index, double& val)
    { val=key*67231.0+2.0*serial_index*(serial_index+3.563); }

   double calc_mean(int key, int rebin, const set<int>& omit);

};


double TestDummy::calc_mean(int key, int rebin, const set<int>& omit)
{
 unsigned int n=getNumberOfMeasurements();
 vector<double> buffer(n);
 unsigned int count=0;
 for (unsigned int k=0;k<n;k++){
    double res; getData(key,k,res);
    if (omit.find(k)==omit.end()){
       buffer[count++]=res;}}
 unsigned int nbins=count/rebin;
 vector<double> bins(nbins);
 count=0;
 for (unsigned int k=0;k<nbins;k++){
    bins[k]=0.0;
    for (int j=0;j<rebin;j++) bins[k]+=buffer[count++];
    bins[k]/=rebin;}
 double mean=0.0;
 for (unsigned int k=0;k<nbins;k++){
    mean+=bins[k];}
 return mean/nbins;
}


void check(double res, double correct, bool& flag)
{
 if (std::abs(res-correct)>1e-8){
    flag=false;
    cout << "TEST FAILED"<<endl;}
}

// ***********************************************************************************

class DataDummy {

   vector<vector<double> > m_data;

 public:

   unsigned int getNumberOfMeasurements() const
    {return 416;}

   DataDummy()  : m_data(4,vector<double>(416))
    {
     m_data[0][0]=1.85655;
     m_data[0][1]=2.33177;
     m_data[0][2]=2.8628;
     m_data[0][3]=2.24938;
     m_data[0][4]=2.09072;
     m_data[0][5]=2.60222;
     m_data[0][6]=2.75415;
     m_data[0][7]=2.15632;
     m_data[0][8]=2.3746;
     m_data[0][9]=2.37008;
     m_data[0][10]=2.62231;
     m_data[0][11]=2.46375;
     m_data[0][12]=2.43703;
     m_data[0][13]=3.24157;
     m_data[0][14]=2.24637;
     m_data[0][15]=2.77661;
     m_data[0][16]=3.25656;
     m_data[0][17]=2.45312;
     m_data[0][18]=2.0357;
     m_data[0][19]=2.42271;
     m_data[0][20]=1.68564;
     m_data[0][21]=2.5658;
     m_data[0][22]=2.28581;
     m_data[0][23]=2.43009;
     m_data[0][24]=2.06045;
     m_data[0][25]=1.87328;
     m_data[0][26]=1.68122;
     m_data[0][27]=2.96455;
     m_data[0][28]=1.83409;
     m_data[0][29]=2.91234;
     m_data[0][30]=2.05089;
     m_data[0][31]=2.53707;
     m_data[0][32]=3.17942;
     m_data[0][33]=2.57466;
     m_data[0][34]=2.76782;
     m_data[0][35]=2.13622;
     m_data[0][36]=2.07982;
     m_data[0][37]=3.51077;
     m_data[0][38]=2.43103;
     m_data[0][39]=2.53724;
     m_data[0][40]=2.67676;
     m_data[0][41]=2.35666;
     m_data[0][42]=2.00444;
     m_data[0][43]=3.17898;
     m_data[0][44]=4.39514;
     m_data[0][45]=1.77736;
     m_data[0][46]=2.09983;
     m_data[0][47]=2.07968;
     m_data[0][48]=2.71421;
     m_data[0][49]=1.94349;
     m_data[0][50]=1.92011;
     m_data[0][51]=2.62334;
     m_data[0][52]=2.64211;
     m_data[0][53]=3.07775;
     m_data[0][54]=2.29675;
     m_data[0][55]=2.218;
     m_data[0][56]=2.54281;
     m_data[0][57]=2.05522;
     m_data[0][58]=2.11645;
     m_data[0][59]=2.43587;
     m_data[0][60]=3.12032;
     m_data[0][61]=3.17404;
     m_data[0][62]=1.99551;
     m_data[0][63]=2.68087;
     m_data[0][64]=1.89269;
     m_data[0][65]=2.93156;
     m_data[0][66]=1.93067;
     m_data[0][67]=2.4927;
     m_data[0][68]=3.06695;
     m_data[0][69]=2.6208;
     m_data[0][70]=2.52731;
     m_data[0][71]=2.77185;
     m_data[0][72]=2.23199;
     m_data[0][73]=2.40364;
     m_data[0][74]=2.41529;
     m_data[0][75]=2.26337;
     m_data[0][76]=2.47449;
     m_data[0][77]=2.60658;
     m_data[0][78]=2.32335;
     m_data[0][79]=1.57004;
     m_data[0][80]=2.16562;
     m_data[0][81]=1.5006;
     m_data[0][82]=1.65899;
     m_data[0][83]=3.47159;
     m_data[0][84]=2.05058;
     m_data[0][85]=2.80761;
     m_data[0][86]=1.16607;
     m_data[0][87]=3.56173;
     m_data[0][88]=2.9281;
     m_data[0][89]=1.17785;
     m_data[0][90]=3.56629;
     m_data[0][91]=2.43229;
     m_data[0][92]=2.74973;
     m_data[0][93]=2.90017;
     m_data[0][94]=3.29468;
     m_data[0][95]=2.02121;
     m_data[0][96]=3.23817;
     m_data[0][97]=2.39645;
     m_data[0][98]=3.87802;
     m_data[0][99]=2.22298;
     m_data[0][100]=1.70094;
     m_data[0][101]=2.56993;
     m_data[0][102]=2.09761;
     m_data[0][103]=2.06941;
     m_data[0][104]=1.95853;
     m_data[0][105]=3.26112;
     m_data[0][106]=2.69224;
     m_data[0][107]=2.97585;
     m_data[0][108]=2.33892;
     m_data[0][109]=2.83901;
     m_data[0][110]=2.12069;
     m_data[0][111]=1.73863;
     m_data[0][112]=2.4955;
     m_data[0][113]=2.6936;
     m_data[0][114]=2.93799;
     m_data[0][115]=2.6965;
     m_data[0][116]=2.4273;
     m_data[0][117]=2.51715;
     m_data[0][118]=2.2518;
     m_data[0][119]=2.081;
     m_data[0][120]=2.20661;
     m_data[0][121]=2.64196;
     m_data[0][122]=2.73385;
     m_data[0][123]=3.0986;
     m_data[0][124]=2.19782;
     m_data[0][125]=3.48081;
     m_data[0][126]=2.40738;
     m_data[0][127]=2.78524;
     m_data[0][128]=2.90735;
     m_data[0][129]=2.90593;
     m_data[0][130]=2.71564;
     m_data[0][131]=2.42354;
     m_data[0][132]=1.68062;
     m_data[0][133]=1.85333;
     m_data[0][134]=2.97069;
     m_data[0][135]=2.3787;
     m_data[0][136]=2.05987;
     m_data[0][137]=3.48463;
     m_data[0][138]=2.14889;
     m_data[0][139]=2.6526;
     m_data[0][140]=2.98193;
     m_data[0][141]=2.55551;
     m_data[0][142]=2.56316;
     m_data[0][143]=3.32269;
     m_data[0][144]=3.6996;
     m_data[0][145]=2.57667;
     m_data[0][146]=2.18098;
     m_data[0][147]=2.3828;
     m_data[0][148]=3.70995;
     m_data[0][149]=3.66781;
     m_data[0][150]=2.77873;
     m_data[0][151]=2.39086;
     m_data[0][152]=3.75081;
     m_data[0][153]=2.78625;
     m_data[0][154]=1.83771;
     m_data[0][155]=3.6276;
     m_data[0][156]=3.00227;
     m_data[0][157]=3.33939;
     m_data[0][158]=2.70562;
     m_data[0][159]=2.62394;
     m_data[0][160]=2.42326;
     m_data[0][161]=2.44429;
     m_data[0][162]=2.08491;
     m_data[0][163]=2.67523;
     m_data[0][164]=2.90981;
     m_data[0][165]=2.87796;
     m_data[0][166]=2.20224;
     m_data[0][167]=2.51631;
     m_data[0][168]=2.6592;
     m_data[0][169]=2.74134;
     m_data[0][170]=2.2277;
     m_data[0][171]=2.18225;
     m_data[0][172]=2.14723;
     m_data[0][173]=3.28347;
     m_data[0][174]=1.63196;
     m_data[0][175]=2.97678;
     m_data[0][176]=2.11622;
     m_data[0][177]=2.69586;
     m_data[0][178]=1.59951;
     m_data[0][179]=2.94002;
     m_data[0][180]=3.37559;
     m_data[0][181]=1.53148;
     m_data[0][182]=2.18243;
     m_data[0][183]=2.70379;
     m_data[0][184]=2.36527;
     m_data[0][185]=2.24564;
     m_data[0][186]=3.34969;
     m_data[0][187]=3.91529;
     m_data[0][188]=3.17528;
     m_data[0][189]=2.77537;
     m_data[0][190]=0.793077;
     m_data[0][191]=1.7808;
     m_data[0][192]=2.3152;
     m_data[0][193]=2.17818;
     m_data[0][194]=1.92771;
     m_data[0][195]=3.14871;
     m_data[0][196]=2.22615;
     m_data[0][197]=2.01044;
     m_data[0][198]=3.20152;
     m_data[0][199]=2.45373;
     m_data[0][200]=2.29441;
     m_data[0][201]=1.48613;
     m_data[0][202]=1.30712;
     m_data[0][203]=1.30523;
     m_data[0][204]=3.35987;
     m_data[0][205]=3.26409;
     m_data[0][206]=4.11459;
     m_data[0][207]=2.67482;
     m_data[0][208]=2.08893;
     m_data[0][209]=2.80392;
     m_data[0][210]=2.78691;
     m_data[0][211]=2.83711;
     m_data[0][212]=2.65003;
     m_data[0][213]=3.68143;
     m_data[0][214]=3.07065;
     m_data[0][215]=2.35507;
     m_data[0][216]=3.6862;
     m_data[0][217]=3.12606;
     m_data[0][218]=2.3232;
     m_data[0][219]=2.46018;
     m_data[0][220]=3.06936;
     m_data[0][221]=2.92997;
     m_data[0][222]=3.03858;
     m_data[0][223]=2.99991;
     m_data[0][224]=1.89774;
     m_data[0][225]=2.77478;
     m_data[0][226]=1.41109;
     m_data[0][227]=1.85473;
     m_data[0][228]=2.97675;
     m_data[0][229]=2.6993;
     m_data[0][230]=3.68204;
     m_data[0][231]=3.14034;
     m_data[0][232]=3.5079;
     m_data[0][233]=1.45975;
     m_data[0][234]=2.6696;
     m_data[0][235]=2.7285;
     m_data[0][236]=2.2764;
     m_data[0][237]=2.53869;
     m_data[0][238]=2.38495;
     m_data[0][239]=2.04228;
     m_data[0][240]=3.8874;
     m_data[0][241]=1.4985;
     m_data[0][242]=3.11695;
     m_data[0][243]=3.26042;
     m_data[0][244]=2.43527;
     m_data[0][245]=1.7344;
     m_data[0][246]=1.4921;
     m_data[0][247]=2.8931;
     m_data[0][248]=3.05946;
     m_data[0][249]=1.78272;
     m_data[0][250]=1.53296;
     m_data[0][251]=3.35762;
     m_data[0][252]=3.09712;
     m_data[0][253]=2.45704;
     m_data[0][254]=2.54039;
     m_data[0][255]=2.4129;
     m_data[0][256]=2.2976;
     m_data[0][257]=2.03864;
     m_data[0][258]=2.71043;
     m_data[0][259]=3.30108;
     m_data[0][260]=3.53385;
     m_data[0][261]=2.17171;
     m_data[0][262]=2.76736;
     m_data[0][263]=2.29363;
     m_data[0][264]=2.74272;
     m_data[0][265]=1.94849;
     m_data[0][266]=3.10443;
     m_data[0][267]=1.82918;
     m_data[0][268]=2.20138;
     m_data[0][269]=2.38224;
     m_data[0][270]=2.23362;
     m_data[0][271]=3.50712;
     m_data[0][272]=1.3343;
     m_data[0][273]=2.89063;
     m_data[0][274]=2.52472;
     m_data[0][275]=1.8973;
     m_data[0][276]=2.34134;
     m_data[0][277]=2.93618;
     m_data[0][278]=2.39209;
     m_data[0][279]=3.03588;
     m_data[0][280]=2.19146;
     m_data[0][281]=3.37216;
     m_data[0][282]=1.27457;
     m_data[0][283]=2.81565;
     m_data[0][284]=2.89112;
     m_data[0][285]=1.65533;
     m_data[0][286]=3.59213;
     m_data[0][287]=2.41514;
     m_data[0][288]=2.63594;
     m_data[0][289]=1.98288;
     m_data[0][290]=3.089;
     m_data[0][291]=3.09671;
     m_data[0][292]=2.36336;
     m_data[0][293]=1.81988;
     m_data[0][294]=2.11079;
     m_data[0][295]=2.47365;
     m_data[0][296]=1.82847;
     m_data[0][297]=2.76436;
     m_data[0][298]=2.57565;
     m_data[0][299]=2.66268;
     m_data[0][300]=1.32353;
     m_data[0][301]=3.05066;
     m_data[0][302]=3.1242;
     m_data[0][303]=2.40283;
     m_data[0][304]=2.73455;
     m_data[0][305]=1.20353;
     m_data[0][306]=3.0111;
     m_data[0][307]=3.51536;
     m_data[0][308]=3.19802;
     m_data[0][309]=2.60534;
     m_data[0][310]=2.73873;
     m_data[0][311]=2.97065;
     m_data[0][312]=2.23414;
     m_data[0][313]=2.13451;
     m_data[0][314]=2.67067;
     m_data[0][315]=3.09357;
     m_data[0][316]=1.8862;
     m_data[0][317]=3.30215;
     m_data[0][318]=1.91757;
     m_data[0][319]=2.06676;
     m_data[0][320]=2.88925;
     m_data[0][321]=3.4943;
     m_data[0][322]=2.52981;
     m_data[0][323]=2.44874;
     m_data[0][324]=2.88005;
     m_data[0][325]=2.66228;
     m_data[0][326]=3.52106;
     m_data[0][327]=2.86019;
     m_data[0][328]=4.27923;
     m_data[0][329]=2.79554;
     m_data[0][330]=2.38296;
     m_data[0][331]=2.32944;
     m_data[0][332]=2.54177;
     m_data[0][333]=1.76884;
     m_data[0][334]=2.71783;
     m_data[0][335]=3.67255;
     m_data[0][336]=1.68532;
     m_data[0][337]=2.41534;
     m_data[0][338]=3.55958;
     m_data[0][339]=2.4671;
     m_data[0][340]=2.80547;
     m_data[0][341]=2.16412;
     m_data[0][342]=1.38253;
     m_data[0][343]=2.01704;
     m_data[0][344]=1.84538;
     m_data[0][345]=1.93398;
     m_data[0][346]=2.84135;
     m_data[0][347]=2.80556;
     m_data[0][348]=2.49885;
     m_data[0][349]=2.94048;
     m_data[0][350]=2.5569;
     m_data[0][351]=1.45262;
     m_data[0][352]=2.31279;
     m_data[0][353]=2.07081;
     m_data[0][354]=2.98302;
     m_data[0][355]=3.47914;
     m_data[0][356]=2.98798;
     m_data[0][357]=2.44038;
     m_data[0][358]=2.94965;
     m_data[0][359]=2.03087;
     m_data[0][360]=1.95436;
     m_data[0][361]=3.26229;
     m_data[0][362]=2.84248;
     m_data[0][363]=3.09334;
     m_data[0][364]=3.2206;
     m_data[0][365]=2.71733;
     m_data[0][366]=1.97492;
     m_data[0][367]=3.15866;
     m_data[0][368]=3.36312;
     m_data[0][369]=1.13252;
     m_data[0][370]=3.33427;
     m_data[0][371]=3.48385;
     m_data[0][372]=1.93709;
     m_data[0][373]=2.95453;
     m_data[0][374]=2.36999;
     m_data[0][375]=2.48145;
     m_data[0][376]=1.80216;
     m_data[0][377]=3.08368;
     m_data[0][378]=1.91659;
     m_data[0][379]=2.65391;
     m_data[0][380]=2.33571;
     m_data[0][381]=2.18389;
     m_data[0][382]=2.15679;
     m_data[0][383]=3.39392;
     m_data[0][384]=1.38153;
     m_data[0][385]=2.55575;
     m_data[0][386]=3.0892;
     m_data[0][387]=3.00568;
     m_data[0][388]=2.85773;
     m_data[0][389]=2.69901;
     m_data[0][390]=2.93834;
     m_data[0][391]=2.59767;
     m_data[0][392]=1.32316;
     m_data[0][393]=3.62406;
     m_data[0][394]=2.16151;
     m_data[0][395]=1.73507;
     m_data[0][396]=1.51985;
     m_data[0][397]=2.57707;
     m_data[0][398]=2.65048;
     m_data[0][399]=3.51874;
     m_data[0][400]=1.84196;
     m_data[0][401]=2.01826;
     m_data[0][402]=3.63692;
     m_data[0][403]=2.04116;
     m_data[0][404]=1.92456;
     m_data[0][405]=2.46898;
     m_data[0][406]=1.24286;
     m_data[0][407]=2.92476;
     m_data[0][408]=2.84299;
     m_data[0][409]=1.77688;
     m_data[0][410]=2.22319;
     m_data[0][411]=3.42608;
     m_data[0][412]=2.66365;
     m_data[0][413]=3.04909;
     m_data[0][414]=2.68199;
     m_data[0][415]=2.89894;
     m_data[1][0]=12.3176;
     m_data[1][1]=7.45482;
     m_data[1][2]=11.4564;
     m_data[1][3]=9.36658;
     m_data[1][4]=8.09634;
     m_data[1][5]=9.69917;
     m_data[1][6]=9.4289;
     m_data[1][7]=9.83914;
     m_data[1][8]=11.1795;
     m_data[1][9]=8.98812;
     m_data[1][10]=12.0774;
     m_data[1][11]=9.32926;
     m_data[1][12]=9.47197;
     m_data[1][13]=10.2356;
     m_data[1][14]=11.906;
     m_data[1][15]=10.7518;
     m_data[1][16]=8.8761;
     m_data[1][17]=9.50918;
     m_data[1][18]=10.8353;
     m_data[1][19]=9.02458;
     m_data[1][20]=8.46813;
     m_data[1][21]=10.0404;
     m_data[1][22]=7.65754;
     m_data[1][23]=10.887;
     m_data[1][24]=9.72281;
     m_data[1][25]=10.0093;
     m_data[1][26]=12.1714;
     m_data[1][27]=13.414;
     m_data[1][28]=13.1745;
     m_data[1][29]=8.45259;
     m_data[1][30]=11.3959;
     m_data[1][31]=8.16183;
     m_data[1][32]=11.696;
     m_data[1][33]=10.0786;
     m_data[1][34]=11.8439;
     m_data[1][35]=8.2759;
     m_data[1][36]=11.7404;
     m_data[1][37]=11.4836;
     m_data[1][38]=12.513;
     m_data[1][39]=8.96994;
     m_data[1][40]=11.1984;
     m_data[1][41]=8.27011;
     m_data[1][42]=11.4793;
     m_data[1][43]=9.52802;
     m_data[1][44]=11.1143;
     m_data[1][45]=9.09673;
     m_data[1][46]=10.6935;
     m_data[1][47]=11.8929;
     m_data[1][48]=10.209;
     m_data[1][49]=7.89446;
     m_data[1][50]=8.11173;
     m_data[1][51]=8.2874;
     m_data[1][52]=11.8033;
     m_data[1][53]=7.65894;
     m_data[1][54]=7.73997;
     m_data[1][55]=9.20829;
     m_data[1][56]=8.18217;
     m_data[1][57]=9.6453;
     m_data[1][58]=10.768;
     m_data[1][59]=8.75504;
     m_data[1][60]=12.0172;
     m_data[1][61]=10.5878;
     m_data[1][62]=8.61805;
     m_data[1][63]=11.8429;
     m_data[1][64]=8.46037;
     m_data[1][65]=8.85474;
     m_data[1][66]=10.1544;
     m_data[1][67]=11.0799;
     m_data[1][68]=11.7015;
     m_data[1][69]=10.0546;
     m_data[1][70]=10.691;
     m_data[1][71]=11.2785;
     m_data[1][72]=13.5247;
     m_data[1][73]=9.95325;
     m_data[1][74]=11.4108;
     m_data[1][75]=8.74153;
     m_data[1][76]=11.7264;
     m_data[1][77]=9.71093;
     m_data[1][78]=9.68292;
     m_data[1][79]=10.6913;
     m_data[1][80]=9.91213;
     m_data[1][81]=8.04474;
     m_data[1][82]=9.87232;
     m_data[1][83]=8.70765;
     m_data[1][84]=11.3561;
     m_data[1][85]=13.4252;
     m_data[1][86]=11.1125;
     m_data[1][87]=9.68645;
     m_data[1][88]=9.88115;
     m_data[1][89]=8.8283;
     m_data[1][90]=9.71049;
     m_data[1][91]=11.5543;
     m_data[1][92]=13.9016;
     m_data[1][93]=9.54106;
     m_data[1][94]=9.16784;
     m_data[1][95]=10.5034;
     m_data[1][96]=10.769;
     m_data[1][97]=13.2202;
     m_data[1][98]=13.1302;
     m_data[1][99]=8.8872;
     m_data[1][100]=10.4076;
     m_data[1][101]=8.95441;
     m_data[1][102]=9.88898;
     m_data[1][103]=8.88356;
     m_data[1][104]=9.48833;
     m_data[1][105]=12.1529;
     m_data[1][106]=10.2881;
     m_data[1][107]=9.98212;
     m_data[1][108]=9.46245;
     m_data[1][109]=10.4718;
     m_data[1][110]=10.1914;
     m_data[1][111]=7.73642;
     m_data[1][112]=8.83138;
     m_data[1][113]=8.76461;
     m_data[1][114]=8.15242;
     m_data[1][115]=9.58076;
     m_data[1][116]=11.2908;
     m_data[1][117]=9.61598;
     m_data[1][118]=10.3553;
     m_data[1][119]=11.4486;
     m_data[1][120]=9.50111;
     m_data[1][121]=11.2035;
     m_data[1][122]=8.93977;
     m_data[1][123]=7.50811;
     m_data[1][124]=9.54339;
     m_data[1][125]=7.47761;
     m_data[1][126]=9.11237;
     m_data[1][127]=10.3955;
     m_data[1][128]=9.93861;
     m_data[1][129]=8.61667;
     m_data[1][130]=10.5792;
     m_data[1][131]=10.5107;
     m_data[1][132]=11.882;
     m_data[1][133]=9.43849;
     m_data[1][134]=12.6222;
     m_data[1][135]=9.58219;
     m_data[1][136]=7.01033;
     m_data[1][137]=9.34265;
     m_data[1][138]=10.0312;
     m_data[1][139]=8.23355;
     m_data[1][140]=9.42389;
     m_data[1][141]=10.5946;
     m_data[1][142]=9.93239;
     m_data[1][143]=10.4824;
     m_data[1][144]=11.3069;
     m_data[1][145]=8.37853;
     m_data[1][146]=9.78136;
     m_data[1][147]=11.7222;
     m_data[1][148]=9.4303;
     m_data[1][149]=9.15156;
     m_data[1][150]=13.6604;
     m_data[1][151]=12.1574;
     m_data[1][152]=7.35511;
     m_data[1][153]=9.45962;
     m_data[1][154]=10.8513;
     m_data[1][155]=7.63538;
     m_data[1][156]=9.98735;
     m_data[1][157]=8.07583;
     m_data[1][158]=10.3216;
     m_data[1][159]=10.2302;
     m_data[1][160]=8.49098;
     m_data[1][161]=7.82506;
     m_data[1][162]=8.65549;
     m_data[1][163]=11.0325;
     m_data[1][164]=11.109;
     m_data[1][165]=13.3657;
     m_data[1][166]=12.3802;
     m_data[1][167]=8.03713;
     m_data[1][168]=10.2933;
     m_data[1][169]=10.6198;
     m_data[1][170]=10.3835;
     m_data[1][171]=11.2314;
     m_data[1][172]=11.2361;
     m_data[1][173]=10.039;
     m_data[1][174]=8.41021;
     m_data[1][175]=10.7795;
     m_data[1][176]=10.4171;
     m_data[1][177]=11.1171;
     m_data[1][178]=14.029;
     m_data[1][179]=10.1007;
     m_data[1][180]=13.6964;
     m_data[1][181]=8.99152;
     m_data[1][182]=12.5996;
     m_data[1][183]=10.0797;
     m_data[1][184]=11.9683;
     m_data[1][185]=9.83288;
     m_data[1][186]=11.0173;
     m_data[1][187]=10.7233;
     m_data[1][188]=11.2487;
     m_data[1][189]=11.9326;
     m_data[1][190]=8.36;
     m_data[1][191]=9.46288;
     m_data[1][192]=8.13198;
     m_data[1][193]=13.7571;
     m_data[1][194]=8.66207;
     m_data[1][195]=7.55625;
     m_data[1][196]=11.0224;
     m_data[1][197]=9.47525;
     m_data[1][198]=10.1662;
     m_data[1][199]=11.1689;
     m_data[1][200]=9.78839;
     m_data[1][201]=8.26718;
     m_data[1][202]=6.94347;
     m_data[1][203]=10.4223;
     m_data[1][204]=9.6529;
     m_data[1][205]=11.3369;
     m_data[1][206]=10.1076;
     m_data[1][207]=8.56222;
     m_data[1][208]=11.476;
     m_data[1][209]=10.5667;
     m_data[1][210]=8.85149;
     m_data[1][211]=10.2944;
     m_data[1][212]=9.44237;
     m_data[1][213]=13.3302;
     m_data[1][214]=12.4097;
     m_data[1][215]=10.546;
     m_data[1][216]=11.0126;
     m_data[1][217]=8.395;
     m_data[1][218]=9.86707;
     m_data[1][219]=9.89375;
     m_data[1][220]=8.98492;
     m_data[1][221]=12.7588;
     m_data[1][222]=8.07745;
     m_data[1][223]=7.84874;
     m_data[1][224]=10.598;
     m_data[1][225]=9.96245;
     m_data[1][226]=12.2438;
     m_data[1][227]=9.15464;
     m_data[1][228]=10.7595;
     m_data[1][229]=10.8323;
     m_data[1][230]=9.94388;
     m_data[1][231]=9.21991;
     m_data[1][232]=9.39443;
     m_data[1][233]=13.1455;
     m_data[1][234]=9.23265;
     m_data[1][235]=10.6352;
     m_data[1][236]=9.79478;
     m_data[1][237]=12.6812;
     m_data[1][238]=13.1155;
     m_data[1][239]=12.5416;
     m_data[1][240]=8.11238;
     m_data[1][241]=9.33605;
     m_data[1][242]=9.57741;
     m_data[1][243]=10.3767;
     m_data[1][244]=7.4084;
     m_data[1][245]=10.7218;
     m_data[1][246]=12.3384;
     m_data[1][247]=10.4354;
     m_data[1][248]=10.7943;
     m_data[1][249]=10.6921;
     m_data[1][250]=12.8287;
     m_data[1][251]=10.8316;
     m_data[1][252]=10.083;
     m_data[1][253]=12.5396;
     m_data[1][254]=10.2694;
     m_data[1][255]=9.89289;
     m_data[1][256]=13.5632;
     m_data[1][257]=8.13295;
     m_data[1][258]=8.11844;
     m_data[1][259]=9.36056;
     m_data[1][260]=8.111;
     m_data[1][261]=11.3034;
     m_data[1][262]=10.1919;
     m_data[1][263]=10.5255;
     m_data[1][264]=13.4769;
     m_data[1][265]=8.13444;
     m_data[1][266]=12.2658;
     m_data[1][267]=9.28789;
     m_data[1][268]=12.4605;
     m_data[1][269]=10.7714;
     m_data[1][270]=10.1928;
     m_data[1][271]=10.2783;
     m_data[1][272]=8.52476;
     m_data[1][273]=10.4158;
     m_data[1][274]=11.8118;
     m_data[1][275]=11.634;
     m_data[1][276]=9.76811;
     m_data[1][277]=10.9875;
     m_data[1][278]=10.2567;
     m_data[1][279]=10.2455;
     m_data[1][280]=10.6018;
     m_data[1][281]=8.77714;
     m_data[1][282]=11.7237;
     m_data[1][283]=9.31817;
     m_data[1][284]=12.4435;
     m_data[1][285]=10.1889;
     m_data[1][286]=10.86;
     m_data[1][287]=8.6668;
     m_data[1][288]=14.5312;
     m_data[1][289]=10.7379;
     m_data[1][290]=12.2404;
     m_data[1][291]=9.22187;
     m_data[1][292]=9.97605;
     m_data[1][293]=6.94324;
     m_data[1][294]=12.7556;
     m_data[1][295]=11.3043;
     m_data[1][296]=10.2011;
     m_data[1][297]=8.92661;
     m_data[1][298]=11.2057;
     m_data[1][299]=11.0514;
     m_data[1][300]=12.5724;
     m_data[1][301]=11.9948;
     m_data[1][302]=11.4193;
     m_data[1][303]=10.3906;
     m_data[1][304]=10.4333;
     m_data[1][305]=9.8421;
     m_data[1][306]=12.1133;
     m_data[1][307]=7.44123;
     m_data[1][308]=11.7137;
     m_data[1][309]=12.5196;
     m_data[1][310]=8.21466;
     m_data[1][311]=11.5419;
     m_data[1][312]=10.9514;
     m_data[1][313]=10.0153;
     m_data[1][314]=11.606;
     m_data[1][315]=9.77369;
     m_data[1][316]=9.97995;
     m_data[1][317]=7.05219;
     m_data[1][318]=8.56115;
     m_data[1][319]=7.2499;
     m_data[1][320]=9.33506;
     m_data[1][321]=9.43463;
     m_data[1][322]=10.0873;
     m_data[1][323]=9.03864;
     m_data[1][324]=7.11709;
     m_data[1][325]=10.1185;
     m_data[1][326]=8.07255;
     m_data[1][327]=10.9949;
     m_data[1][328]=11.1265;
     m_data[1][329]=9.69212;
     m_data[1][330]=7.25891;
     m_data[1][331]=6.65669;
     m_data[1][332]=10.5459;
     m_data[1][333]=8.84607;
     m_data[1][334]=9.94519;
     m_data[1][335]=7.37342;
     m_data[1][336]=11.8247;
     m_data[1][337]=8.26742;
     m_data[1][338]=8.36301;
     m_data[1][339]=11.4747;
     m_data[1][340]=7.83938;
     m_data[1][341]=12.1131;
     m_data[1][342]=9.4886;
     m_data[1][343]=12.085;
     m_data[1][344]=8.08547;
     m_data[1][345]=9.33312;
     m_data[1][346]=11.1957;
     m_data[1][347]=9.53573;
     m_data[1][348]=5.92164;
     m_data[1][349]=12.4687;
     m_data[1][350]=9.4069;
     m_data[1][351]=14.6972;
     m_data[1][352]=11.8325;
     m_data[1][353]=11.4317;
     m_data[1][354]=11.6039;
     m_data[1][355]=10.0065;
     m_data[1][356]=11.9804;
     m_data[1][357]=11.8962;
     m_data[1][358]=9.4473;
     m_data[1][359]=7.82793;
     m_data[1][360]=8.25396;
     m_data[1][361]=8.94664;
     m_data[1][362]=10.2727;
     m_data[1][363]=10.2679;
     m_data[1][364]=10.7079;
     m_data[1][365]=8.53658;
     m_data[1][366]=9.49821;
     m_data[1][367]=8.34894;
     m_data[1][368]=10.8115;
     m_data[1][369]=9.36412;
     m_data[1][370]=10.5533;
     m_data[1][371]=10.8167;
     m_data[1][372]=8.52904;
     m_data[1][373]=11.8635;
     m_data[1][374]=8.55805;
     m_data[1][375]=8.32609;
     m_data[1][376]=8.32339;
     m_data[1][377]=9.07139;
     m_data[1][378]=11.2805;
     m_data[1][379]=8.72537;
     m_data[1][380]=9.92748;
     m_data[1][381]=9.79023;
     m_data[1][382]=10.256;
     m_data[1][383]=13.2806;
     m_data[1][384]=11.4038;
     m_data[1][385]=7.36643;
     m_data[1][386]=8.62855;
     m_data[1][387]=8.91498;
     m_data[1][388]=11.2026;
     m_data[1][389]=11.8445;
     m_data[1][390]=10.4385;
     m_data[1][391]=8.78306;
     m_data[1][392]=11.8575;
     m_data[1][393]=11.7345;
     m_data[1][394]=6.9687;
     m_data[1][395]=11.1167;
     m_data[1][396]=8.09774;
     m_data[1][397]=12.1643;
     m_data[1][398]=11.5632;
     m_data[1][399]=8.86667;
     m_data[1][400]=10.9347;
     m_data[1][401]=11.8779;
     m_data[1][402]=10.6138;
     m_data[1][403]=7.74389;
     m_data[1][404]=10.3096;
     m_data[1][405]=12.2197;
     m_data[1][406]=10.3045;
     m_data[1][407]=10.4703;
     m_data[1][408]=7.32171;
     m_data[1][409]=11.9198;
     m_data[1][410]=9.16843;
     m_data[1][411]=9.78963;
     m_data[1][412]=12.4302;
     m_data[1][413]=7.69242;
     m_data[1][414]=8.98673;
     m_data[1][415]=12.1791;
     m_data[2][0]=28.2166;
     m_data[2][1]=33.7201;
     m_data[2][2]=32.3895;
     m_data[2][3]=33.4216;
     m_data[2][4]=36.6733;
     m_data[2][5]=31.2052;
     m_data[2][6]=39.615;
     m_data[2][7]=30.9351;
     m_data[2][8]=37.4793;
     m_data[2][9]=35.9456;
     m_data[2][10]=32.7953;
     m_data[2][11]=30.1592;
     m_data[2][12]=34.1557;
     m_data[2][13]=35.354;
     m_data[2][14]=29.7147;
     m_data[2][15]=32.7945;
     m_data[2][16]=37.4829;
     m_data[2][17]=30.7487;
     m_data[2][18]=28.7795;
     m_data[2][19]=33.5881;
     m_data[2][20]=34.6123;
     m_data[2][21]=32.9814;
     m_data[2][22]=32.6593;
     m_data[2][23]=34.2296;
     m_data[2][24]=31.2244;
     m_data[2][25]=30.0575;
     m_data[2][26]=26.2294;
     m_data[2][27]=33.5731;
     m_data[2][28]=30.7992;
     m_data[2][29]=33.4128;
     m_data[2][30]=33.9944;
     m_data[2][31]=34.1979;
     m_data[2][32]=34.438;
     m_data[2][33]=34.0021;
     m_data[2][34]=34.9574;
     m_data[2][35]=33.6394;
     m_data[2][36]=35.4912;
     m_data[2][37]=34.5964;
     m_data[2][38]=34.5038;
     m_data[2][39]=31.63;
     m_data[2][40]=29.3816;
     m_data[2][41]=26.6017;
     m_data[2][42]=34.1857;
     m_data[2][43]=33.4319;
     m_data[2][44]=33.2533;
     m_data[2][45]=32.1275;
     m_data[2][46]=28.7601;
     m_data[2][47]=29.5835;
     m_data[2][48]=39.0138;
     m_data[2][49]=33.7011;
     m_data[2][50]=29.2967;
     m_data[2][51]=32.528;
     m_data[2][52]=35.2637;
     m_data[2][53]=37.0515;
     m_data[2][54]=35.6241;
     m_data[2][55]=33.4845;
     m_data[2][56]=28.3071;
     m_data[2][57]=34.2347;
     m_data[2][58]=32.5579;
     m_data[2][59]=36.7222;
     m_data[2][60]=27.2649;
     m_data[2][61]=34.2027;
     m_data[2][62]=37.0072;
     m_data[2][63]=34.6973;
     m_data[2][64]=30.1834;
     m_data[2][65]=30.825;
     m_data[2][66]=36.752;
     m_data[2][67]=28.3811;
     m_data[2][68]=34.0841;
     m_data[2][69]=27.0171;
     m_data[2][70]=31.4374;
     m_data[2][71]=29.6232;
     m_data[2][72]=38.5109;
     m_data[2][73]=35.405;
     m_data[2][74]=41.8615;
     m_data[2][75]=35.9478;
     m_data[2][76]=35.3676;
     m_data[2][77]=30.9655;
     m_data[2][78]=28.3694;
     m_data[2][79]=35.6416;
     m_data[2][80]=35.9366;
     m_data[2][81]=33.9785;
     m_data[2][82]=32.8537;
     m_data[2][83]=37.3031;
     m_data[2][84]=34.653;
     m_data[2][85]=29.0505;
     m_data[2][86]=32.3393;
     m_data[2][87]=32.1666;
     m_data[2][88]=37.4792;
     m_data[2][89]=34.3785;
     m_data[2][90]=28.8677;
     m_data[2][91]=30.3631;
     m_data[2][92]=31.9266;
     m_data[2][93]=29.1613;
     m_data[2][94]=34.0489;
     m_data[2][95]=30.2811;
     m_data[2][96]=34.0718;
     m_data[2][97]=34.145;
     m_data[2][98]=33.336;
     m_data[2][99]=32.0574;
     m_data[2][100]=33.5673;
     m_data[2][101]=34.422;
     m_data[2][102]=28.7398;
     m_data[2][103]=31.7159;
     m_data[2][104]=29.1716;
     m_data[2][105]=30.572;
     m_data[2][106]=34.2438;
     m_data[2][107]=32.3905;
     m_data[2][108]=28.8774;
     m_data[2][109]=28.6742;
     m_data[2][110]=33;
     m_data[2][111]=31.511;
     m_data[2][112]=30.9646;
     m_data[2][113]=34.1045;
     m_data[2][114]=26.5899;
     m_data[2][115]=36.4015;
     m_data[2][116]=27.3828;
     m_data[2][117]=34.859;
     m_data[2][118]=34.1033;
     m_data[2][119]=33.5822;
     m_data[2][120]=34.8937;
     m_data[2][121]=32.7352;
     m_data[2][122]=32.0183;
     m_data[2][123]=30.2512;
     m_data[2][124]=32.1351;
     m_data[2][125]=35.2869;
     m_data[2][126]=31.8016;
     m_data[2][127]=30.6996;
     m_data[2][128]=31.6335;
     m_data[2][129]=36.0196;
     m_data[2][130]=35.7742;
     m_data[2][131]=31.2754;
     m_data[2][132]=34.2911;
     m_data[2][133]=32.9458;
     m_data[2][134]=29.7911;
     m_data[2][135]=30.9749;
     m_data[2][136]=30.1298;
     m_data[2][137]=29.4952;
     m_data[2][138]=38.8334;
     m_data[2][139]=38.0959;
     m_data[2][140]=30.4131;
     m_data[2][141]=35.3655;
     m_data[2][142]=29.251;
     m_data[2][143]=31.7017;
     m_data[2][144]=31.5636;
     m_data[2][145]=27.3091;
     m_data[2][146]=29.0965;
     m_data[2][147]=31.982;
     m_data[2][148]=38.5192;
     m_data[2][149]=33.1275;
     m_data[2][150]=30.9409;
     m_data[2][151]=31.8252;
     m_data[2][152]=37.1431;
     m_data[2][153]=32.5874;
     m_data[2][154]=34.774;
     m_data[2][155]=29.7429;
     m_data[2][156]=30.5479;
     m_data[2][157]=36.9929;
     m_data[2][158]=34.3799;
     m_data[2][159]=32.9535;
     m_data[2][160]=36.1093;
     m_data[2][161]=33.2954;
     m_data[2][162]=29.5728;
     m_data[2][163]=34.63;
     m_data[2][164]=31.1336;
     m_data[2][165]=29.3589;
     m_data[2][166]=28.3325;
     m_data[2][167]=34.1952;
     m_data[2][168]=32.3549;
     m_data[2][169]=33.0988;
     m_data[2][170]=32.0083;
     m_data[2][171]=34.6271;
     m_data[2][172]=37.1099;
     m_data[2][173]=33.8491;
     m_data[2][174]=31.3567;
     m_data[2][175]=35.1784;
     m_data[2][176]=33.0677;
     m_data[2][177]=30.2093;
     m_data[2][178]=35.4823;
     m_data[2][179]=32.1909;
     m_data[2][180]=30.3755;
     m_data[2][181]=32.7609;
     m_data[2][182]=32.1722;
     m_data[2][183]=31.0352;
     m_data[2][184]=30.187;
     m_data[2][185]=29.8675;
     m_data[2][186]=34.8551;
     m_data[2][187]=29.7696;
     m_data[2][188]=29.1739;
     m_data[2][189]=28.7896;
     m_data[2][190]=34.2302;
     m_data[2][191]=33.867;
     m_data[2][192]=38.4446;
     m_data[2][193]=34.0072;
     m_data[2][194]=30.9187;
     m_data[2][195]=32.5009;
     m_data[2][196]=32.8848;
     m_data[2][197]=30.2106;
     m_data[2][198]=34.135;
     m_data[2][199]=30.713;
     m_data[2][200]=32.5734;
     m_data[2][201]=33.1002;
     m_data[2][202]=31.787;
     m_data[2][203]=32.8352;
     m_data[2][204]=30.4433;
     m_data[2][205]=29.1398;
     m_data[2][206]=29.7796;
     m_data[2][207]=31.5659;
     m_data[2][208]=31.6038;
     m_data[2][209]=31.2453;
     m_data[2][210]=33.9258;
     m_data[2][211]=34.0602;
     m_data[2][212]=33.8067;
     m_data[2][213]=32.7699;
     m_data[2][214]=33.5235;
     m_data[2][215]=26.0965;
     m_data[2][216]=32.2322;
     m_data[2][217]=35.7424;
     m_data[2][218]=36.6677;
     m_data[2][219]=32.4539;
     m_data[2][220]=32.2037;
     m_data[2][221]=31.4555;
     m_data[2][222]=32.5416;
     m_data[2][223]=30.7443;
     m_data[2][224]=33.233;
     m_data[2][225]=28.1532;
     m_data[2][226]=34.0782;
     m_data[2][227]=35.7906;
     m_data[2][228]=31.6876;
     m_data[2][229]=27.0383;
     m_data[2][230]=33.4646;
     m_data[2][231]=31.5153;
     m_data[2][232]=29.5419;
     m_data[2][233]=25.8503;
     m_data[2][234]=29.9825;
     m_data[2][235]=29.5675;
     m_data[2][236]=29.8794;
     m_data[2][237]=33.5971;
     m_data[2][238]=28.1669;
     m_data[2][239]=32.5529;
     m_data[2][240]=36.112;
     m_data[2][241]=32.1457;
     m_data[2][242]=38.293;
     m_data[2][243]=32.0512;
     m_data[2][244]=35.0064;
     m_data[2][245]=34.1299;
     m_data[2][246]=35.2155;
     m_data[2][247]=33.9748;
     m_data[2][248]=36.5749;
     m_data[2][249]=30.5744;
     m_data[2][250]=30.7332;
     m_data[2][251]=27.6372;
     m_data[2][252]=32.6598;
     m_data[2][253]=31.1551;
     m_data[2][254]=32.0168;
     m_data[2][255]=29.7631;
     m_data[2][256]=32.9267;
     m_data[2][257]=36.3304;
     m_data[2][258]=27.2611;
     m_data[2][259]=28.8999;
     m_data[2][260]=36.6499;
     m_data[2][261]=36.9606;
     m_data[2][262]=29.7139;
     m_data[2][263]=38.3075;
     m_data[2][264]=29.7464;
     m_data[2][265]=33.9069;
     m_data[2][266]=34.8292;
     m_data[2][267]=31.3984;
     m_data[2][268]=31.5107;
     m_data[2][269]=31.8428;
     m_data[2][270]=33.3233;
     m_data[2][271]=34.706;
     m_data[2][272]=33.0403;
     m_data[2][273]=37.9586;
     m_data[2][274]=35.5008;
     m_data[2][275]=31.4135;
     m_data[2][276]=33.6939;
     m_data[2][277]=33.1104;
     m_data[2][278]=30.4118;
     m_data[2][279]=31.2131;
     m_data[2][280]=36.1715;
     m_data[2][281]=34.4267;
     m_data[2][282]=36.9864;
     m_data[2][283]=34.3039;
     m_data[2][284]=29.1826;
     m_data[2][285]=31.6764;
     m_data[2][286]=27.9299;
     m_data[2][287]=33.3928;
     m_data[2][288]=34.0155;
     m_data[2][289]=32.7887;
     m_data[2][290]=27.4221;
     m_data[2][291]=32.585;
     m_data[2][292]=30.7573;
     m_data[2][293]=39.6427;
     m_data[2][294]=31.7797;
     m_data[2][295]=34.1603;
     m_data[2][296]=40.5808;
     m_data[2][297]=31.7945;
     m_data[2][298]=31.931;
     m_data[2][299]=30.3419;
     m_data[2][300]=29.3763;
     m_data[2][301]=36.1951;
     m_data[2][302]=32.0909;
     m_data[2][303]=34.0353;
     m_data[2][304]=29.0933;
     m_data[2][305]=30.6623;
     m_data[2][306]=31.811;
     m_data[2][307]=34.5477;
     m_data[2][308]=31.2288;
     m_data[2][309]=32.2539;
     m_data[2][310]=36.5527;
     m_data[2][311]=28.4562;
     m_data[2][312]=32.2519;
     m_data[2][313]=32.0568;
     m_data[2][314]=28.7329;
     m_data[2][315]=37.9177;
     m_data[2][316]=30.9485;
     m_data[2][317]=37.8958;
     m_data[2][318]=39.0462;
     m_data[2][319]=30.3655;
     m_data[2][320]=32.3861;
     m_data[2][321]=35.0979;
     m_data[2][322]=31.3699;
     m_data[2][323]=29.1212;
     m_data[2][324]=32.351;
     m_data[2][325]=32.9621;
     m_data[2][326]=35.9739;
     m_data[2][327]=27.9854;
     m_data[2][328]=33.6417;
     m_data[2][329]=35.4686;
     m_data[2][330]=29.3967;
     m_data[2][331]=30.4908;
     m_data[2][332]=28.1008;
     m_data[2][333]=31.0131;
     m_data[2][334]=33.1023;
     m_data[2][335]=36.0698;
     m_data[2][336]=35.818;
     m_data[2][337]=34.9662;
     m_data[2][338]=31.5455;
     m_data[2][339]=30.6825;
     m_data[2][340]=33.3309;
     m_data[2][341]=31.7729;
     m_data[2][342]=34.6679;
     m_data[2][343]=31.3986;
     m_data[2][344]=33.3063;
     m_data[2][345]=30.324;
     m_data[2][346]=36.353;
     m_data[2][347]=31.3121;
     m_data[2][348]=32.0687;
     m_data[2][349]=32.5841;
     m_data[2][350]=30.3412;
     m_data[2][351]=32.8961;
     m_data[2][352]=32.3486;
     m_data[2][353]=34.3264;
     m_data[2][354]=32.7624;
     m_data[2][355]=30.0839;
     m_data[2][356]=32.523;
     m_data[2][357]=28.6064;
     m_data[2][358]=28.2328;
     m_data[2][359]=33.582;
     m_data[2][360]=34.404;
     m_data[2][361]=30.7893;
     m_data[2][362]=30.7088;
     m_data[2][363]=31.0586;
     m_data[2][364]=32.8498;
     m_data[2][365]=36.9711;
     m_data[2][366]=33.6822;
     m_data[2][367]=37.1335;
     m_data[2][368]=27.9158;
     m_data[2][369]=33.4299;
     m_data[2][370]=28.7487;
     m_data[2][371]=36.1715;
     m_data[2][372]=35.1046;
     m_data[2][373]=36.5154;
     m_data[2][374]=27.3737;
     m_data[2][375]=35.1688;
     m_data[2][376]=31.5778;
     m_data[2][377]=29.3631;
     m_data[2][378]=29.8986;
     m_data[2][379]=31.2836;
     m_data[2][380]=31.2095;
     m_data[2][381]=25.6362;
     m_data[2][382]=30.2187;
     m_data[2][383]=33.8635;
     m_data[2][384]=33.7708;
     m_data[2][385]=28.6302;
     m_data[2][386]=37.4482;
     m_data[2][387]=29.1382;
     m_data[2][388]=33.0898;
     m_data[2][389]=30.7931;
     m_data[2][390]=28.1371;
     m_data[2][391]=32.2999;
     m_data[2][392]=34.0358;
     m_data[2][393]=30.9451;
     m_data[2][394]=30.5019;
     m_data[2][395]=31.42;
     m_data[2][396]=35.6293;
     m_data[2][397]=31.592;
     m_data[2][398]=33.6425;
     m_data[2][399]=33.458;
     m_data[2][400]=33.3776;
     m_data[2][401]=33.7518;
     m_data[2][402]=32.9122;
     m_data[2][403]=33.8247;
     m_data[2][404]=28.6892;
     m_data[2][405]=32.4676;
     m_data[2][406]=33.5572;
     m_data[2][407]=32.3685;
     m_data[2][408]=31.5853;
     m_data[2][409]=38.7086;
     m_data[2][410]=29.343;
     m_data[2][411]=33.5214;
     m_data[2][412]=30.3872;
     m_data[2][413]=35.3921;
     m_data[2][414]=31.4665;
     m_data[2][415]=29.3524;
     m_data[3][0]=58.6196;
     m_data[3][1]=49.801;
     m_data[3][2]=58.3555;
     m_data[3][3]=59.4253;
     m_data[3][4]=59.0026;
     m_data[3][5]=65.6717;
     m_data[3][6]=63.5584;
     m_data[3][7]=51.7004;
     m_data[3][8]=49.6881;
     m_data[3][9]=50.921;
     m_data[3][10]=61.619;
     m_data[3][11]=55.3221;
     m_data[3][12]=52.2151;
     m_data[3][13]=60.1621;
     m_data[3][14]=56.4231;
     m_data[3][15]=61.5759;
     m_data[3][16]=60.3694;
     m_data[3][17]=58.949;
     m_data[3][18]=62.7813;
     m_data[3][19]=53.1443;
     m_data[3][20]=56.202;
     m_data[3][21]=56.0681;
     m_data[3][22]=60.6729;
     m_data[3][23]=55.5502;
     m_data[3][24]=54.8961;
     m_data[3][25]=55.8027;
     m_data[3][26]=57.6978;
     m_data[3][27]=61.338;
     m_data[3][28]=55.1725;
     m_data[3][29]=51.1757;
     m_data[3][30]=61.2048;
     m_data[3][31]=56.8962;
     m_data[3][32]=49.2903;
     m_data[3][33]=55.2256;
     m_data[3][34]=59.2017;
     m_data[3][35]=53.0133;
     m_data[3][36]=52.3928;
     m_data[3][37]=58.2074;
     m_data[3][38]=51.3276;
     m_data[3][39]=56.209;
     m_data[3][40]=53.736;
     m_data[3][41]=55.935;
     m_data[3][42]=59.1499;
     m_data[3][43]=58.9694;
     m_data[3][44]=52.6882;
     m_data[3][45]=54.6012;
     m_data[3][46]=56.4393;
     m_data[3][47]=59.1505;
     m_data[3][48]=57.8471;
     m_data[3][49]=53.3148;
     m_data[3][50]=57.153;
     m_data[3][51]=58.4525;
     m_data[3][52]=55.492;
     m_data[3][53]=54.0245;
     m_data[3][54]=52.3994;
     m_data[3][55]=53.3697;
     m_data[3][56]=57.2243;
     m_data[3][57]=60.7352;
     m_data[3][58]=61.641;
     m_data[3][59]=53.4213;
     m_data[3][60]=58.6068;
     m_data[3][61]=55.27;
     m_data[3][62]=53.5068;
     m_data[3][63]=57.5061;
     m_data[3][64]=55.0319;
     m_data[3][65]=46.2854;
     m_data[3][66]=54.5589;
     m_data[3][67]=54.1688;
     m_data[3][68]=58.4431;
     m_data[3][69]=54.9569;
     m_data[3][70]=61.4706;
     m_data[3][71]=54.0714;
     m_data[3][72]=60.8658;
     m_data[3][73]=60.4015;
     m_data[3][74]=59.0628;
     m_data[3][75]=57.6543;
     m_data[3][76]=55.1586;
     m_data[3][77]=56.194;
     m_data[3][78]=63.2131;
     m_data[3][79]=55.1798;
     m_data[3][80]=57.1211;
     m_data[3][81]=55.3848;
     m_data[3][82]=70.9087;
     m_data[3][83]=61.8372;
     m_data[3][84]=69.7307;
     m_data[3][85]=60.0905;
     m_data[3][86]=56.7773;
     m_data[3][87]=61.4864;
     m_data[3][88]=63.2605;
     m_data[3][89]=58.18;
     m_data[3][90]=60.1428;
     m_data[3][91]=59.7778;
     m_data[3][92]=57.7667;
     m_data[3][93]=56.1643;
     m_data[3][94]=50.9109;
     m_data[3][95]=55.5027;
     m_data[3][96]=54.7252;
     m_data[3][97]=56.8702;
     m_data[3][98]=49.4703;
     m_data[3][99]=57.1326;
     m_data[3][100]=56.415;
     m_data[3][101]=57.4399;
     m_data[3][102]=57.5174;
     m_data[3][103]=54.8157;
     m_data[3][104]=59.9236;
     m_data[3][105]=54.9643;
     m_data[3][106]=54.1184;
     m_data[3][107]=55.5407;
     m_data[3][108]=62.2531;
     m_data[3][109]=52.2454;
     m_data[3][110]=53.9022;
     m_data[3][111]=62.7133;
     m_data[3][112]=55.7462;
     m_data[3][113]=56.1941;
     m_data[3][114]=49.3725;
     m_data[3][115]=54.0832;
     m_data[3][116]=51.6985;
     m_data[3][117]=59.8767;
     m_data[3][118]=55.1874;
     m_data[3][119]=53.8994;
     m_data[3][120]=48.9418;
     m_data[3][121]=66.1821;
     m_data[3][122]=57.4968;
     m_data[3][123]=56.0284;
     m_data[3][124]=60.0023;
     m_data[3][125]=57.9011;
     m_data[3][126]=51.211;
     m_data[3][127]=57.2324;
     m_data[3][128]=47.8611;
     m_data[3][129]=51.585;
     m_data[3][130]=54.4341;
     m_data[3][131]=61.8175;
     m_data[3][132]=48.9269;
     m_data[3][133]=63.4544;
     m_data[3][134]=58.6621;
     m_data[3][135]=51.226;
     m_data[3][136]=60.2233;
     m_data[3][137]=56.2442;
     m_data[3][138]=62.2868;
     m_data[3][139]=53.8152;
     m_data[3][140]=54.3279;
     m_data[3][141]=52.349;
     m_data[3][142]=64.1076;
     m_data[3][143]=54.0334;
     m_data[3][144]=57.2036;
     m_data[3][145]=53.53;
     m_data[3][146]=60.4146;
     m_data[3][147]=59.184;
     m_data[3][148]=48.5953;
     m_data[3][149]=61.3184;
     m_data[3][150]=56.6893;
     m_data[3][151]=51.9002;
     m_data[3][152]=52.2847;
     m_data[3][153]=61.674;
     m_data[3][154]=51.8271;
     m_data[3][155]=50.9751;
     m_data[3][156]=54.2429;
     m_data[3][157]=59.9969;
     m_data[3][158]=54.99;
     m_data[3][159]=59.5966;
     m_data[3][160]=61.6798;
     m_data[3][161]=48.5816;
     m_data[3][162]=55.7852;
     m_data[3][163]=61.8986;
     m_data[3][164]=57.794;
     m_data[3][165]=55.6705;
     m_data[3][166]=55.814;
     m_data[3][167]=60.6895;
     m_data[3][168]=58.5772;
     m_data[3][169]=60.8801;
     m_data[3][170]=55.2308;
     m_data[3][171]=60.1676;
     m_data[3][172]=55.1975;
     m_data[3][173]=56.1659;
     m_data[3][174]=49.4796;
     m_data[3][175]=55.6137;
     m_data[3][176]=56.445;
     m_data[3][177]=56.1158;
     m_data[3][178]=56.4017;
     m_data[3][179]=52.4866;
     m_data[3][180]=57.5385;
     m_data[3][181]=63.2265;
     m_data[3][182]=57.2645;
     m_data[3][183]=48.0036;
     m_data[3][184]=51.3627;
     m_data[3][185]=59.0416;
     m_data[3][186]=59.6948;
     m_data[3][187]=56.881;
     m_data[3][188]=59.5504;
     m_data[3][189]=53.0518;
     m_data[3][190]=55.8173;
     m_data[3][191]=57.3513;
     m_data[3][192]=53.0451;
     m_data[3][193]=59.4036;
     m_data[3][194]=58.0379;
     m_data[3][195]=55.2903;
     m_data[3][196]=53.544;
     m_data[3][197]=60.4765;
     m_data[3][198]=60.9792;
     m_data[3][199]=53.6619;
     m_data[3][200]=58.4933;
     m_data[3][201]=54.6585;
     m_data[3][202]=52.9121;
     m_data[3][203]=57.3222;
     m_data[3][204]=58.902;
     m_data[3][205]=59.8581;
     m_data[3][206]=53.204;
     m_data[3][207]=52.3275;
     m_data[3][208]=51.2246;
     m_data[3][209]=65.0029;
     m_data[3][210]=56.325;
     m_data[3][211]=66.5376;
     m_data[3][212]=51.5533;
     m_data[3][213]=59.5404;
     m_data[3][214]=54.7571;
     m_data[3][215]=61.5694;
     m_data[3][216]=54.5671;
     m_data[3][217]=54.8898;
     m_data[3][218]=50.4256;
     m_data[3][219]=60.5366;
     m_data[3][220]=53.2587;
     m_data[3][221]=64.3892;
     m_data[3][222]=50.1673;
     m_data[3][223]=56.993;
     m_data[3][224]=57.5441;
     m_data[3][225]=54.8063;
     m_data[3][226]=50.5378;
     m_data[3][227]=52.4107;
     m_data[3][228]=50.3737;
     m_data[3][229]=49.1353;
     m_data[3][230]=55.9746;
     m_data[3][231]=52.2053;
     m_data[3][232]=52.5985;
     m_data[3][233]=48.7297;
     m_data[3][234]=48.9012;
     m_data[3][235]=51.6194;
     m_data[3][236]=56.7246;
     m_data[3][237]=53.0985;
     m_data[3][238]=51.3922;
     m_data[3][239]=52.6696;
     m_data[3][240]=49.0367;
     m_data[3][241]=65.8151;
     m_data[3][242]=57.4867;
     m_data[3][243]=58.6864;
     m_data[3][244]=49.2241;
     m_data[3][245]=58.4006;
     m_data[3][246]=46.2283;
     m_data[3][247]=50.4388;
     m_data[3][248]=55.7142;
     m_data[3][249]=55.9131;
     m_data[3][250]=55.2778;
     m_data[3][251]=54.918;
     m_data[3][252]=59.7191;
     m_data[3][253]=61.9497;
     m_data[3][254]=50.5099;
     m_data[3][255]=49.2395;
     m_data[3][256]=50.8609;
     m_data[3][257]=53.3642;
     m_data[3][258]=56.2082;
     m_data[3][259]=51.5483;
     m_data[3][260]=52.7094;
     m_data[3][261]=54.693;
     m_data[3][262]=47.5354;
     m_data[3][263]=56.3435;
     m_data[3][264]=55.0075;
     m_data[3][265]=53.2006;
     m_data[3][266]=59.0288;
     m_data[3][267]=57.8517;
     m_data[3][268]=56.1826;
     m_data[3][269]=60.4521;
     m_data[3][270]=58.965;
     m_data[3][271]=60.6996;
     m_data[3][272]=50.4006;
     m_data[3][273]=55.8757;
     m_data[3][274]=57.7357;
     m_data[3][275]=54.3795;
     m_data[3][276]=52.8572;
     m_data[3][277]=58.7503;
     m_data[3][278]=49.2746;
     m_data[3][279]=61.8984;
     m_data[3][280]=58.3161;
     m_data[3][281]=60.7542;
     m_data[3][282]=50.6536;
     m_data[3][283]=56.9276;
     m_data[3][284]=56.7381;
     m_data[3][285]=53.695;
     m_data[3][286]=58.2102;
     m_data[3][287]=55.5052;
     m_data[3][288]=57.5711;
     m_data[3][289]=51.1312;
     m_data[3][290]=68.1423;
     m_data[3][291]=57.2235;
     m_data[3][292]=58.1823;
     m_data[3][293]=64.7545;
     m_data[3][294]=58.2942;
     m_data[3][295]=57.2438;
     m_data[3][296]=64.1426;
     m_data[3][297]=56.7685;
     m_data[3][298]=50.4837;
     m_data[3][299]=56.3935;
     m_data[3][300]=56.0217;
     m_data[3][301]=56.0808;
     m_data[3][302]=52.5773;
     m_data[3][303]=52.4737;
     m_data[3][304]=51.6112;
     m_data[3][305]=54.0887;
     m_data[3][306]=59.8757;
     m_data[3][307]=57.5066;
     m_data[3][308]=58.402;
     m_data[3][309]=59.0936;
     m_data[3][310]=52.4851;
     m_data[3][311]=64.3808;
     m_data[3][312]=55.569;
     m_data[3][313]=54.7554;
     m_data[3][314]=47.403;
     m_data[3][315]=53.6665;
     m_data[3][316]=57.3572;
     m_data[3][317]=62.6633;
     m_data[3][318]=63.3036;
     m_data[3][319]=52.9936;
     m_data[3][320]=52.1226;
     m_data[3][321]=55.727;
     m_data[3][322]=54.7892;
     m_data[3][323]=49.8882;
     m_data[3][324]=56.901;
     m_data[3][325]=54.9349;
     m_data[3][326]=50.8735;
     m_data[3][327]=56.3429;
     m_data[3][328]=48.8878;
     m_data[3][329]=54.9997;
     m_data[3][330]=60.8278;
     m_data[3][331]=52.8141;
     m_data[3][332]=60.1322;
     m_data[3][333]=50.7014;
     m_data[3][334]=49.644;
     m_data[3][335]=56.2367;
     m_data[3][336]=60.5194;
     m_data[3][337]=52.2877;
     m_data[3][338]=58.1416;
     m_data[3][339]=46.1846;
     m_data[3][340]=56.157;
     m_data[3][341]=44.8086;
     m_data[3][342]=62.3356;
     m_data[3][343]=58.679;
     m_data[3][344]=61.1694;
     m_data[3][345]=50.7597;
     m_data[3][346]=59.4003;
     m_data[3][347]=56.823;
     m_data[3][348]=55.7169;
     m_data[3][349]=58.6373;
     m_data[3][350]=53.5247;
     m_data[3][351]=55.9231;
     m_data[3][352]=58.6844;
     m_data[3][353]=57.5186;
     m_data[3][354]=61.4103;
     m_data[3][355]=55.1094;
     m_data[3][356]=58.8497;
     m_data[3][357]=59.6332;
     m_data[3][358]=57.9464;
     m_data[3][359]=57.4363;
     m_data[3][360]=61.052;
     m_data[3][361]=57.5703;
     m_data[3][362]=59.9211;
     m_data[3][363]=56.5766;
     m_data[3][364]=52.057;
     m_data[3][365]=56.1634;
     m_data[3][366]=48.8771;
     m_data[3][367]=52.0961;
     m_data[3][368]=60.5818;
     m_data[3][369]=58.9074;
     m_data[3][370]=50.7239;
     m_data[3][371]=57.4691;
     m_data[3][372]=71.3556;
     m_data[3][373]=54.3518;
     m_data[3][374]=49.2861;
     m_data[3][375]=57.3177;
     m_data[3][376]=53.035;
     m_data[3][377]=58.5187;
     m_data[3][378]=55.777;
     m_data[3][379]=50.5649;
     m_data[3][380]=51.0205;
     m_data[3][381]=58.1688;
     m_data[3][382]=56.7138;
     m_data[3][383]=58.9907;
     m_data[3][384]=54.561;
     m_data[3][385]=54.8523;
     m_data[3][386]=52.932;
     m_data[3][387]=52.8818;
     m_data[3][388]=60.0465;
     m_data[3][389]=53.3285;
     m_data[3][390]=55.162;
     m_data[3][391]=59.1281;
     m_data[3][392]=56.0427;
     m_data[3][393]=57.0943;
     m_data[3][394]=59.2474;
     m_data[3][395]=50.6208;
     m_data[3][396]=57.4039;
     m_data[3][397]=48.5951;
     m_data[3][398]=50.5887;
     m_data[3][399]=46.6269;
     m_data[3][400]=54.231;
     m_data[3][401]=53.64;
     m_data[3][402]=53.7458;
     m_data[3][403]=61.6356;
     m_data[3][404]=64.0535;
     m_data[3][405]=52.2654;
     m_data[3][406]=59.2225;
     m_data[3][407]=56.5792;
     m_data[3][408]=57.3617;
     m_data[3][409]=52.432;
     m_data[3][410]=55.57;
     m_data[3][411]=53.5023;
     m_data[3][412]=59.4242;
     m_data[3][413]=58.5287;
     m_data[3][414]=54.853;
     m_data[3][415]=54.9324;
    }

   void getData(int key, int serial_index, double& val)
    { val=m_data[key][serial_index];}

};


// ***********************************************

void test_MCDataHandler()
{

#ifdef COMPLEXNUMBERS

cout << "No test done for complex number"<<endl;

#else

 TestDummy dd;
 double res;
 bool flag=true;
 cout.precision(12);

 MCDataHandler<TestDummy,int> tch(dd);  set<int> omit; int rebin=1;
 for (int key=0;key<=3;key++){
    res=tch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}

 rebin=2; tch.setRebin(rebin);
 cout << "Rebin = "<<rebin<<endl;
 for (int key=0;key<=3;key++){
    res=tch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}

 rebin=3; tch.setRebin(rebin);
 cout << "Rebin = "<<rebin<<endl;
 for (int key=0;key<=4;key++){
    res=tch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}

 rebin=5; tch.setRebin(rebin);
 cout << "Rebin = "<<rebin<<endl;
 for (int key=0;key<=3;key++){
    res=tch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}

 tch.clearData();
 cout << "Omit 0 only"<<endl;
 tch.addOmission(0);
 tch.setRebin(1);
 omit.insert(0); rebin=1;
 cout << "Rebin = "<<rebin<<endl;
 for (int key=0;key<=3;key++){
    res=tch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}

 rebin=2; tch.setRebin(rebin);
 cout << "Rebin = "<<rebin<<endl;
 for (int key=0;key<=3;key++){
    res=tch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}

 rebin=3; tch.setRebin(rebin);
 cout << "Rebin = "<<rebin<<endl;
 for (int key=0;key<=4;key++){
    res=tch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}

 rebin=5; tch.setRebin(rebin);
 cout << "Rebin = "<<rebin<<endl;
 for (int key=0;key<=3;key++){
    res=tch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}


 tch.clearData();
 cout << "Omit 0 and 253 only"<<endl;
 tch.addOmission(253);
 tch.setRebin(1);
 omit.insert(253); rebin=1;
 cout << "Rebin = "<<rebin<<endl;
 for (int key=0;key<=3;key++){
    res=tch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}

 rebin=2; tch.setRebin(rebin);
 cout << "Rebin = "<<rebin<<endl;
 for (int key=0;key<=3;key++){
    res=tch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}

 rebin=3; tch.setRebin(rebin);
 cout << "Rebin = "<<rebin<<endl;
 for (int key=0;key<=4;key++){
    res=tch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}

 rebin=5; tch.setRebin(rebin);
 cout << "Rebin = "<<rebin<<endl;
 for (int key=0;key<=3;key++){
    res=tch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}


 tch.clearData();
 cout << "Omit various only"<<endl;
 tch.setRebin(1);
 omit.insert(111); omit.insert(53); 
 for (int p=172;p<=184;p++) omit.insert(p); 
 omit.insert(213);
 tch.addOmissions(omit);
 rebin=1;
 cout << "Rebin = "<<rebin<<endl;
 for (int key=0;key<=3;key++){
    res=tch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}

 rebin=2; tch.setRebin(rebin);
 cout << "Rebin = "<<rebin<<endl;
 for (int key=0;key<=3;key++){
    res=tch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}

 rebin=3; tch.setRebin(rebin);
 cout << "Rebin = "<<rebin<<endl;
 for (int key=0;key<=4;key++){
    res=tch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}

 rebin=5; tch.setRebin(rebin);
 cout << "Rebin = "<<rebin<<endl;
 for (int key=0;key<=3;key++){
    res=tch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}


 omit.clear();
 rebin=4;
 MCDataHandler<TestDummy,int> zch(dd,rebin);
 for (int key=0;key<=3;key++){
    res=zch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}

 rebin=1; zch.setRebin(rebin);
 cout << "Rebin = "<<rebin<<endl;
 for (int key=0;key<=3;key++){
    res=zch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}

 omit.insert(7); omit.insert(8); omit.insert(9); omit.insert(10);
 omit.insert(43); omit.insert(88); omit.insert(64); omit.insert(154);
 omit.insert(244);
 rebin=3;
 MCDataHandler<TestDummy,int> wch(dd,rebin,omit);
 for (int key=0;key<=3;key++){
    res=wch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}

 rebin=1; wch.setRebin(rebin);
 cout << "Rebin = "<<rebin<<endl;
 for (int key=0;key<=3;key++){
    res=wch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}

 rebin=2; wch.setRebin(rebin);
 cout << "Rebin = "<<rebin<<endl;
 for (int key=0;key<=3;key++){
    res=wch.getMean(key); cout << "TestDummy mean "<<key<<" value = "<<res<<endl; 
    check(res,dd.calc_mean(key,rebin,omit),flag);}

 cout << endl;
 if (flag) cout << "ALL TESTS PASSED"<<endl<<endl;
 else cout << "SOME TESTS FAILED"<<endl<<endl;

 DataDummy dh;
 MCDataHandler<DataDummy,int> mch(dh,11);

 mch.addOmission(34);
 mch.addOmission(78);
 mch.addOmission(211);

 set<int> omits;
 omits.insert(712); omits.insert(0); omits.insert(13);
 omits.insert(112); omits.insert(165);
 mch.addOmissions(omits);

 cout << "number of measurements = "<<mch.getNumberOfMeasurements()<<endl;
 cout << "number of bins = "<<mch.getNumberOfBins()<<endl;

 cout << "mean 0 value = "<<mch.getMean(0)<<endl;
 cout << "mean 1 value = "<<mch.getMean(1)<<endl;
 cout << "mean 2 value = "<<mch.getMean(2)<<endl;
 cout << "mean 3 value = "<<mch.getMean(3)<<endl;
 cout << "mean 3 value = "<<mch.getMean(3)<<endl;
 mch.clearData();
 cout << "mean 3 value = "<<mch.getMean(3)<<endl;
 cout << "mean 1 value = "<<mch.getMean(1)<<endl;

 mch.setRebin(2);
 cout << "number of measurements = "<<mch.getNumberOfMeasurements()<<endl;
 cout << "number of bins = "<<mch.getNumberOfBins()<<endl;

 cout << "mean 0 value = "<<mch.getMean(0)<<endl;
 cout << "mean 1 value = "<<mch.getMean(1)<<endl;
 cout << "mean 2 value = "<<mch.getMean(2)<<endl;
 cout << "mean 3 value = "<<mch.getMean(3)<<endl;

 mch.clearOmissions();
 mch.setRebin(5);
 cout << "number of measurements = "<<mch.getNumberOfMeasurements()<<endl;
 cout << "number of bins = "<<mch.getNumberOfBins()<<endl;

 cout << "mean 0 value = "<<mch.getMean(0)<<endl;
 cout << "mean 1 value = "<<mch.getMean(1)<<endl;
 cout << "mean 2 value = "<<mch.getMean(2)<<endl;
 cout << "mean 3 value = "<<mch.getMean(3)<<endl;
// mch.erase(3);
 cout << "mean 3 value = "<<mch.getMean(3)<<endl;

 cout << "number of bootstrap resamplings = "<<mch.getNumberOfBootstrapResamplings()<<endl;

 mch.setBootstrapper(1024,571230,33);
 cout << "number of bootstrap resamplings = "<<mch.getNumberOfBootstrapResamplings()<<endl;

 const Bootstrapper& B(mch.getBootstrapper());
 cout << "bootstrapper number of objects = "<<B.getNumberOfObjects()<<endl;
 cout << "bootstrapper number of resamplings = "<<B.getNumberOfResamplings()<<endl;
 cout << "RNG seed = "<<B.getRNGSeed()<<endl;
 cout << "skip value = "<<B.getSkipValue()<<endl;
 cout << "current bootstrap count = "<<B.getCurrentResamplingCount()<<endl;
 cout << "bootstrap precompute= "<<B.isPrecomputeMode()<<endl;

 int bootresampling=67;
 cout << "mean 0 value = "<<mch.getMean(0,bootresampling)<<endl;
 cout << "mean 1 value = "<<mch.getMean(1,bootresampling)<<endl;
 cout << "mean 2 value = "<<mch.getMean(2,bootresampling)<<endl;
 cout << "mean 3 value = "<<mch.getMean(3,bootresampling)<<endl;

 mch.setRebin(1);
 const Bootstrapper& BB(mch.getBootstrapper());
 cout << "bootstrapper number of objects = "<<BB.getNumberOfObjects()<<endl;
 cout << "number of bootstrap resamplings = "<<mch.getNumberOfBootstrapResamplings()<<endl;
 cout << "mean 0 value = "<<mch.getMean(0,bootresampling)<<endl;
 cout << "mean 1 value = "<<mch.getMean(1,bootresampling)<<endl;
 cout << "mean 2 value = "<<mch.getMean(2,bootresampling)<<endl;
 cout << "mean 3 value = "<<mch.getMean(3,bootresampling)<<endl;

 cout << "mean 3 value bootstrap 0 = "<<mch.getMean(3,0)<<endl;
 cout << "mean 3 value bootstrap 1 = "<<mch.getMean(3,1)<<endl;
 cout << "mean 3 value bootstrap 88 = "<<mch.getMean(3,88)<<endl;
 cout << "mean 3 value bootstrap 1 = "<<mch.getMean(3,1)<<endl;
 cout << "mean 3 value bootstrap 0 = "<<mch.getMean(3,0)<<endl;
 cout << "mean 3 value bootstrap 32 = "<<mch.getMean(3,32)<<endl;

#endif
}


void testMCDataHandler(XMLHandler& xml_in)
{
 if (xml_tag_count(xml_in,"TestMCDataHandler")==0)
 return;

 test_MCDataHandler();
}

